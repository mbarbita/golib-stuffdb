// tier n:
db[n]:
// Tn data map:
    map[ [data map id]: map[key]interface{};... ]
// Tn ref map:
    map[ list id: map[id: taget(tier,list id);... ];... ]


// tier n+1
db[n+1]:
// Tn+1 data map:
    map[ [data map id]: data;... ]
// Tn+1 ref map:
    map[ list id: map[id: taget(tier,list id);... ];... ]

// tier n+2
// Tn+2 data map:
    map[ [data map id]: data;... ]
// Tn+2 ref map:
    map[ list id: map[id: taget(tier,list id, selector);... ];... ]

...

// n=0
// T0
// T0 data map:
map[ 1: name: ppl
        map[
            0: Prs A;
            1: Prs B;
            2: Prs C;
            3: Prs D;
           ];
     2:...]

// T0 ref map: none

// T1
// T1 data map: none

// T1 ref map:
map[ 1: name: dudes
        map[
             1: 0,1,["0:3"];
           ];
     2: name: friends
        map[
             1: 0,1,["2","3"];
           ];
    ]

Target:
struct {
tier
map id
selector []string
}

selector
[<R>|<[nnn][:][ppp]>] ...

assume data map unless "R" present
if selector is empty or nil: all records
if "R" present: ref map (all, no fragmentation)
else
if ":" present: range nnn to ppp
if ":" not present: nnn = key
